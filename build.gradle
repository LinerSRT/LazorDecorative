buildscript {
    repositories {
        mavenCentral()
        maven { url "https://maven.fabricmc.net" }
        maven { url "https://repo.sleeping.town" }
    }
    dependencies {
        classpath "agency.highlysuspect:voldeloom:2.4-SNAPSHOT"
    }
}

apply plugin: "agency.highlysuspect.voldeloom"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava {
    options.release.set(7)
    options.encoding = 'UTF-8'

}

archivesBaseName = project.modid
version = project.mod_version

volde {
    runs {
        client {
            programArg "liner"
        }
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.slick2d:slick2d-core:1.0.0'
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'org.jetbrains:annotations-java5:24.0.0'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.0'
    implementation 'net.sourceforge.streamsupport:streamsupport:1.7.4'
    implementation fileTree(include: ['*.jar'], dir: 'dependencies')

    minecraft "com.mojang:minecraft:${project.minecraft}"
    forge "net.minecraftforge:forge:${project.minecraft_forge}:universal@zip"
    mappings "net.minecraftforge:forge:${project.minecraft_forge}:src@zip"
}

sourceSets {
    main {
        resources {
            srcDirs'src/main/java'
        }
    }
}

task clearBuild {
    doFirst {
        delete {
            delete fileTree(dir: '.gradle/voldeloom-cache')
            delete fileTree(dir: 'run/coremods')
            delete fileTree(dir: 'run/crash-reports')
            delete fileTree(dir: 'build/libs')
            delete fileTree(new File(System.getProperty("user.dir"), "run")) {
                include '**/*.log', '**/*.1', '**/*.2', '**/*.lck'
            }
        }
        logger.log(LogLevel.INFO, "Clean complete")
    }
}

def isServerBuild(boolean isServerBuild) {
    File file = file('src/main/java/ru/liner/decorative/BuildConfig.java')
    if (file.exists()) {
        file.text = file.text.replaceAll(/(public static final boolean SERVER_BUILD = )\w+;/, "\$1${isServerBuild};")
        logger.lifecycle("Updated SERVER_BUILD to ${isServerBuild} in ${file}")
    } else {
        logger.lifecycle("BuildConfig does not exist!")
    }
}

task renameClientJar {
    doLast {
        File build = file("build/libs/${archivesBaseName}-${version}.jar")
        if (build.exists()) {
            build.renameTo(file("build/libs/${archivesBaseName}-${version}-CLIENT.jar"))
            logger.lifecycle("Renamed ${build} to ${archivesBaseName}-${version}-CLIENT.jar")
        } else {
            logger.lifecycle("File ${build} does not exist!")
        }
    }
}

task renameServerJar {
    doLast {
        File build = file("build/libs/${archivesBaseName}-${version}.jar")
        if (build.exists()) {
            build.renameTo(file("build/libs/${archivesBaseName}-${version}-SERVER.jar"))
            logger.lifecycle("Renamed ${build} to ${archivesBaseName}-${version}-SERVER.jar")
        } else {
            logger.lifecycle("File ${build} does not exist!")
        }
    }
}

task buildClient {
    doFirst {
        isServerBuild(false)
    }
    dependsOn build
    finalizedBy renameClientJar
}

task buildServer {
    doFirst {
        isServerBuild(true)
    }
    dependsOn build
    finalizedBy renameServerJar
}
